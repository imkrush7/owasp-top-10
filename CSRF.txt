
Cross-Site Request Forgery
---------------------------
---------------------------

Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. 
CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. 
With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. 
If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. 
If the victim is an administrative account, CSRF can compromise the entire web application.

The user is currently authenticated to the site, the site will have no way to distinguish between the forged request sent by the victim and a legitimate request sent by the victim. 

It's sometimes possible to store the CSRF attack on the vulnerable site itself. Such vulnerabilities are called "stored CSRF flaws". 
This can be accomplished by simply storing an IMG or IFRAME tag in a field that accepts HTML, or by a more complex cross-site scripting attack.



Cross-site Request Forgery in GET Requests
-------------------------------------------
			     --------------
<img src="http://192.168.43.228/dvwa/vulnerabilities/csrf/?password_new=krishna&password_conf=krishna&Change=Change#" />



Cross-site Request Forgery in POST Requests
--------------------------------------------
			     ---------------
<body onload="document.getElementById('csrf').submit()">
  <form id="csrf" action="http://example.com/changePassword.php" method="POST">
    <input name="newPassword" value="attackerPassword" />
  </form>
</body>






Synonyms
----------
CSRF attacks are also known by a number of other names, including XSRF, "Sea Surf", Session Riding, Cross-Site Reference Forgery, and Hostile Linking. 
Microsoft refers to this type of attack as a One-Click attack



How does CSRF work?
--------------------
			Three key conditions must be in place:

	    1. A relevant action. 
			Need a relevant action that web application have

	    2. Cookie-based session handling. 
			The application uses a session cookie to identify which user issued the request. 
			There are no other tokens or mechanisms in place to track user sessions. 
	   
	    3. No unpredictable request parameters. 
			The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess.




CSRF Protection
----------------
	To defend against CSRF attacks is to include a CSRF token within requests. 

	    1. Token should be Unpredictable with high entropy, as for session tokens in general. and Tied to the user's session.
	    2. Synchronizing the cookie with an anti-CSRF token that has already been provided to the browser 
	    3. Strictly validated in every case before the relevant action is executed.




CSRF Tokens
------------
A CSRF token is a unique, secret, unpredictable value that is generated by the server-side application and transmitted to the client in such a way that it is included in a subsequent HTTP request made by the client. 
When the later request is made, the server-side application validates that the request includes the expected token and rejects the request if the token is missing or invalid. 

    The anti-CSRF token should be unique for each user session
    The session should automatically expire after a suitable amount of time
    The anti-CSRF token should be a cryptographically random value of significant length
    The anti-CSRF token should be cryptographically secure, that is, generated by a strong pseudo-random number generator (PRNG) algorithm
    The anti-CSRF token can be added as a hidden field for forms or within URLs (only necessary if GET requests cause state changes, that is, GET requests are not idempotent)
    The server should reject the requested action if the anti-CSRF token fails validation
Eg:
----
<input type="hidden" name="csrf-token" value="CIwNZNlR4XbisJF39I8yWnWX9wX4WFoz" /> 


SameSite Cookies
-----------------
The SameSite cookie attribute is a new attribute that can be set on cookies to instruct the browser to disable third-party usage for specific cookies. 
The SameSite attribute is set by the server when setting the cookie and requests the browser to only send the cookie in a first-party context. 
Therefore, the request has to originate from the same origin – requests made by third-party sites will not include the SameSite cookie. 
This effectively eliminates Cross-site Request Forgery attacks without the use of synchronizer tokens. 
Unfortunately, this method of CSRF protection is not yet effective in all web browsers.

Eg:
----
SetCookie: SessionId=sYMnfCUrAlmqVVZn9dqevxyFpKZt30NN; SameSite=Strict;

SetCookie: SessionId=sYMnfCUrAlmqVVZn9dqevxyFpKZt30NN; SameSite=Lax; 


If the SameSite attribute is set to Strict, then the browser will not include the cookie in any requests that originate from another site. 

If the SameSite attribute is set to Lax, then the browser will include the cookie in requests that originate from another site.