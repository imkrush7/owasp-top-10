


1. SQL Injection
-------------------
-------------------
	> stripslashes($uname);         
	> mysqli_real_escape_string($Conn, $uname);  
	> db_escape($Conn, $id);  // retrieve data from database.
	
	

	SQL Injection is a type of injection attack used to gain unauthorized access to data
	SQL injection weaknesses occur when an application uses untrusted data, such as data entered into web form fields, as part of a database query. 
	An attacker can use it to make a web application process and execute injected SQL statements as part of an existing SQL query.
	The code has to be injected in such a way that the SQL statement should generate a valid result upon execution.
	When an application fails to properly sanitize this untrusted data before adding it to a SQL query, an attacker can include their own SQL commands which the database will execute.

Issue
------:  Input validation, Error are displayed to users, Errors are not logged.
Remediation  
------------:  before processing database queries validate and escape user inputs, when dealing with sql queries that contain user input then use prepared statement(parameterized queries), instead showing error to the user log them to a file.




1. Authentication Byapass
--------------------------
	User name   |	Password      |	   SQL Query
      -----------------------------------------------------------------------------------------------------
 	tom 	    |	' or '1'='1   |	   SELECT * FROM users WHERE name='tom' and password='' or '1'='1'



2. Error Based
----------------

	There is no output on the page but some error messages. 
	That means the id parameter is vulnerable to code injection and the code we inserted just broke the query. 
	The injected code must be put in a manner that it won't break the complete SQL statement. 
	The next step is to inject specially crafted SQL commands to verify the existence of vulnerability.
	
	 1. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1
	 2. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1'
	 3. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' order by 1--++
	 4. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' order by 8--++  (error)
	 5. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' order by 7--++  (no error)
	 6. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' union all select 1,2,3,4,5,6,7--++
	 7. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' union all select 1,database(),3,4,5,6,7--++
	 8. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' union all select 1,group_concat(table_name),3,4,5,6,7 from information_schema.tables where table_schema=database()--++
	 9. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' union all select 1,group_concat(column_name),3,4,5,6,7 from information_schema.columns where table_name='fishcartuser'--++
	10. http://fishcart.epizy.com/FishCart/FullDesc.php?id=1' union all select 1,2,3,4,group_concat(fname,0x3a,password),6,7 from fishcartuser--++
	dvwa:>>	1 UNION SELECT 1,concat(user,0x0a,password) FROM users
	xyz' or 1 = 1
	
	Union based SQL Injection
	--------------------------
		Union-based SQLi is an in-band SQL injection technique that leverages the UNION SQL operator to combine the results of two or more SELECT statements 
		into a single result which is then returned as part of the HTTP response.



3. Blind Sql Injection
------------------------
	This type of injection attack does not show any error message, hence “blind” in its name. 
	It is more difficult to exploit as it returns information when the application is given SQL payloads that return a true or false response from the server. 
	By observing the response, an attacker can extract sensitive information.

	Boolean Based SQL Injection
	-----------------------------
		That relies on sending an SQL query to the database which forces the application to return a different result depending on whether the query returns a TRUE or FALSE result.
		Depending on the result, the content within the HTTP response will change, or remain the same.

	Time Based SQL Injection
	-----------------------------
		That relies on sending an SQL query to the database which forces the database to wait for a specified amount of time before responding. 
		The response time will indicate to the attacker whether the result of the query is TRUE or FALSE.
		Depending on the result, an HTTP response will be returned with a delay, or returned immediately. 







: Based on the type of parameters is passing or the parameter is accepting user input there are different types of SQLi

1. Advanced SQL Injection - String based
-------------------------------------------
	1. String based SQLi
		FishCart/FullDesc.php?pname=Shoes'
			SELECT * FROM products WHERE pname='Shoes''

2. Advanced SQL Injection - Integer based
-------------------------------------------
	2. Integer based SQLi
		FishCart/FullDesc.php?id=1'
			SELECT * FROM products WHERE id=1'

3. Advanced SQL Injection - on POST Data
-------------------------------------------
4. Advanced SQL Injection - on User Agent
-------------------------------------------







1. First-order SQL injection 
------------------------------
	UNIONS added to an existing statement to execute a second statement
	Subquery added to an existing statement


2. Second-order SQL injection 
------------------------------
	Second-order SQL injection arises when user-supplied data is stored by the application and later incorporated into SQL queries in an unsafe way. 
	To detect the vulnerability, it is normally necessary to submit suitable data in one location, 
	And then use some other application function that processes the data in an unsafe way.

	Second Order Sql injection is an application vulnerability, it occurs when user submitted values are stored in the database, 
	and then it gets used by some other functionality in the application without escaping or filtering the data. 
	Usually data from external sources (user supplied) is considered dangerous and is escaped/filtered. Developers trust the data coming from the database. 
	This behaviour is similar to Stored Cross Site Scripting attack. 
	Second Order Sql Injection requires more knowledge of how submitted values are later used in order to perform successful second order sql injection.

	Eg: change password leads to second order sqli.





1. In-band SQL Injection 
-------------------------
	In-band SQL Injection is the most common and easy-to-exploit of SQL Injection attacks. 
	In-band SQL Injection occurs when an attacker is able to use the same communication channel to both launch the attack and gather results.
	The two most common types of in-band SQL Injection are Error-based SQLi and Union-based SQLi.


2. Inferential SQL Injection == Blind SQL Injection 
----------------------------------------------------


3. Out-of-band SQL Injection
-----------------------------
	It depends on features being enabled on the database server being used by the web application
	Out-of-band SQL Injection occurs when an attacker is unable to use the same channel to launch the attack and gather results.
	With this type of SQL Injection, the application shows the same response regardless of the user input and the database error. 
	To retrieve the output, a different transport channel like HTTP requests or DNS resolution is used. 
	Note that the attacker needs to control said HTTP or DNS server.




Prevention
-----------
-----------


The most important precautions are data sanitization and validation, which should already be in place. 
Sanitization usually involves running any submitted data through a function (such as MySQL's mysql_real_escape_string() function) to ensure that any 
dangerous characters (like " ' ") are not passed to a SQL query in data.

Validation is slightly different, in that it attempts to ensure that the data submitted is in the form that is expected.

Validation is often carried out in two ways: 
by blacklisting dangerous or unwanted characters (although hackers can often get around blacklists) and 
by whitelisting only those characters that are allowed in a given circumstance


1. Developers can prevent SQL Injection vulnerabilities in web applications by utilizing parameterized database queries with bound, typed parameters and careful use of parameterized stored procedures in the database.
2. Trust no-one:	 Assume all user-submitted data is evil and validate and sanitize everything.
3. Don't use dynamic SQL when it can be avoided: 	used prepared statements, parameterized queries or stored procedures instead whenever possible.
4. Update and patch
5. Use appropriate privileges:	don't connect to your database using an account with admin-level privileges unless there is some compelling reason to do so. 
				Using a limited access account is far safer, and can limit what a hacker is able to do.














/////////////image upload

 $uploaded_name = $_FILES['uploaded']['name'];
 $uploaded_ext = substr($uploaded_name, strrpos($uploaded_name, '.') + 1);
 $uploaded_size = $_FILES['uploaded']['size'];
    if (($uploaded_ext == "jpg" || $uploaded_ext == "JPG" || $uploaded_ext == "jpeg" || $uploaded_ext == "JPEG") && ($uploaded_size < 100000)){

